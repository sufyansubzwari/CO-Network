# types for Jobs namespace

type Jobs {
    _id: ID
    title: String!
    description: String
    owner: User!
    image: String
    organization: Organizations!
    jobType: [ObjectType]!
    salaryRange: SalaryRange!
    remote: Boolean
    languages: [LevelTagsType]
    industry: [Tags]!
    jobResponsibility: String
    culture: String
    aboutUsTeam: String
    candidateQuestions: String
    views: Int
    entity: String
    jobExperience: [ObjectType]
    positionTags: [Tags]
    place: Places
}

type SalaryRange {
    min: Int
    max: Int
    frecuency: String
}

type Query {
    jobs(filter: String, limit: Int, jobs: JobsInputSearch): [Jobs]
    job(_id: String): Jobs
    jobCounts(field: String): [Counts]
    myJobs(owner: String): MyJobs
}

type MyJobs {
    myJobs: [String]
    myApplies: [String]
}

type Counts{
    _id: String
    number: Int
}

input JobsInputSearch {
    _id: TableStringFilterInput
    title: TableStringFilterInput
    description: TableStringFilterInput
    salaryRange_DOT_min: TableStringFilterInput
    salaryRange_DOT_max: TableStringFilterInput
    jobType: JobTypeElemMatch
    jobExperience: JobTypeElemMatch
    startDate: TableDateFilterInput
    endDate: TableDateFilterInput
    owner: String
    location: [LocationInput]
}

input JobTypeElemMatch{
    elemMatch: JobTypeOr
}

input JobTypeOr{
    or: [JobTypeInputSearch]
}

input JobTypeInputSearch{
    label: String
    value: String
}

input SalaryRangeInputSearch{
    min: TableStringFilterInput
    max: TableStringFilterInput
}

input JobsInput {
    _id: ID
    title: String
    description: String
    owner: String
    image: String
    organization: String
    jobType: [ObjectTypeInput]
    salaryRange: SalaryRangeInput
    remote: Boolean
    languages: [LevelTagsInput]
    industry: [TagsInput]
    jobResponsibility: String
    culture: String
    aboutUsTeam: String
    candidateQuestions: String
    positionTags: [TagsInput]
    jobExperience: [ObjectTypeInput]
    place: PlacesInput
}

input SalaryRangeInput {
    min: Int
    max: Int
    frecuency: String
}

type Mutation {
    job(job: JobsInput!): Jobs
    updateJobsImage(_id: String!, image: String!): Jobs
    deleteJob(_id: String!): Jobs
}
