# types for Events namespace

type Events {
    _id: String
    title: String!
    description: String
    startDate: Date!
    endDate: Date!
    organization: Organizations
    owner: User!
    venueName: String!
    venueEmail: String
    phone: String
    notes: String
    category: [Tags]!
    attenders: Attenders!
    image: String
    entity: String
    views: Int
    tickets: [TicketsType]
    eventType: ObjectType
    sponsors: [Sponsors]
    place: Places
    followerList: [String]
}

type Attenders {
    min: Int
    max: Int
}

type ObjectType {
    label: String
    value: String
    name: String
    active: String
}


type Query {
    events(filter: String, limit: Int, events: EventsInputSearch): [Events]
    event(_id: String): Events
    myEvents(owner: String): myEvents
}

type myEvents {
    myEvents: [String]
    followings: [String]
}

type TicketsType{
    name: String
    description: String
    type: String
    available: Int
    price: Float
}

input EventsInputSearch {
    _id: TableStringFilterInput
    title: TableStringFilterInput
    description: TableStringFilterInput
    startDate: TableDateFilterInput
    endDate: TableDateFilterInput
    owner: String
    category: TableStringFilterInput
    venueName: TableStringFilterInput
    tickets: ticketsElemMatch
    location: [LocationInput]
    locationRange: Float
}
input ticketsElemMatch{
    elemMatch: TicketsInputSearch
}

input TicketsInputSearch{
    name: TableStringFilterInput
    description: TableStringFilterInput
    type: TableStringFilterInput
    available: TableStringFilterInput
    price: TableStringFilterInput
}

input TableStringFilterInput{
    ne: String
    eq: String
    lte: Float
    lt: Float
    gte: Float
    gt: Float
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
    regex: String
    in: [String]
}
input TableDateFilterInput{
    ne: Date
    eq: Date
    lte: Date
    lt: Date
    gte: Date
    gt: Date
}

input EventsInput {
    _id: String
    title: String!
    description: String
    startDate: Date
    organization: String
    organizer: Boolean
    endDate: Date
    owner: String!
    venueName: String
    venueEmail: String
    organizer: String
    phone: String
    notes: String
    category: [TagsInput]!
    attenders: AttendersInput!
    image: String
    tickets: [TicketsTypeInput]
    eventType: ObjectTypeInput
    place: PlacesInput
    sponsors: [SponsorsInput]
}

input AttendersInput {
    min: Int
    max: Int
}

input ObjectTypeInput {
    _id: String
    label: String
    value: String
    name: String
    active: String
    number: Int
}

input TicketsTypeInput{
    name: String
    description: String
    type: String
    available: Int
    price: Float
}

type Mutation {
    event(events: EventsInput!): Events
    updateEventImage(_id: String!, image: String!): Events
    deleteEvent(_id: String!): Events
}
