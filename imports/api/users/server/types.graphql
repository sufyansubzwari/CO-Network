# types for Users namespace

type User {
    _id: String!
    createdAt: Date!
    services: [String]!
    emails: [Email]
    profile: Profile!
    subscriptions: [Subscription]
    views: Int
}

type Email {
    address: String
    verified: Boolean
}

type Profile {
    name: String
    isSignUp: Boolean!
    lastName: String
    nickName: String
    loginCount: Int
    image: String
    cover: String
    email: String
    gender: String
    website: String
    phone: String
    professional: Professional
    social: Social
    aboutMe: AboutMe
    knowledge: Knowledge
    speaker: Speaker
    achievements: [Achievements]
}

type AboutMe {
    yourPassion: String
    existingProblem: String
    steps: String
}

type Knowledge {
    languages: [Tags]
    curiosity: [Tags]
    lookingFor: [ObjectType]
}

type Professional {
    industry: [Tags]
    salaryRange: SalaryRange
    jobType: [ObjectType]
}

type Speaker {
    join: Boolean
    topic: [Tags]
    style: [ObjectType]
    stage: [ObjectType]
    otherlooking: [Tags]
    otherpreferred: [Tags]
}

type Subscription {
    endpoint: String!
    keys: Keys!
}

type Keys {
    auth: String!
    p256dh: String!
}

input KeysInput {
    auth: String!
    p256dh: String!
}

input SubscriptionInput {
    endpoint: String!
    keys: KeysInput!
}

type Query {
    users(user: UsersInputSearch, filter: String, limit: Int): [User]
    user(id: String): User
}

input UsersInputSearch {
    title: TableStringFilterInput
    description: TableStringFilterInput
    location: [LocationInput]
}

input UserInput {
    _id: String
    createdAt: Date
    services: [String]
    emails: [EmailInput]
    profile: ProfileInput
    subscriptions: [SubscriptionInput]
}

input ProfileInput {
    isSignUp: Boolean
    name: String
    lastName: String
    nickName: String
    image: String
    cover: String
    email: String
    gender: String
    website: String
    phone: String
    professional: ProfessionalInput
    social: SocialInput
    aboutMe: AboutMeInput
    knowledge: KnowledgeInput
    speaker: SpeakerInput
    achievements: [AchievementsInput]
    place: PlacesInput
}

input EmailInput {
    address: String
    verified: Boolean
}

input InfoInput {
    name: String
    lastName: String
    image: String
    cover: String
    email: String
    gender: String
    website: String
    phone: String
}

input AboutMeInput {
    yourPassion: String
    existingProblem: String
    steps: String
}

input KnowledgeInput {
    languages: [TagsInput]
    curiosity: [TagsInput]
    lookingFor: [ObjectTypeInput]
}

input ProfessionalInput {
    industry: [TagsInput]
    salaryRange: SalaryRangeInput
    jobType: [ObjectTypeInput]
    seeking: Boolean
}

input SpeakerInput {
    join: Boolean
    topic: [TagsInput]
    otherlooking: [TagsInput]
    otherpreferred: [TagsInput]
    lookingFor: [ObjectTypeInput]
    stage: [ObjectTypeInput]
}

type Mutation {
    user(user: UserInput!): User
    deleteUser(_id: String!): User
    updateSignUpStatus(_id: String!, status: Boolean!): User
    sendVerificationEmail: User
    saveSubscription(subscription: SubscriptionInput!): User
    deleteSubscription(endpoint: String!): User
    sendPushNotification: User
}