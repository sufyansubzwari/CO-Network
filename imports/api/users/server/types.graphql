# types for Users namespace

type User {
  _id: String!
  createdAt: Date!
  services: [String]!
  emails: [Email]
  profile: Profile!
  subscriptions: [Subscription]
}

type Email {
  address: String
  verified: Boolean
}

type Profile {
  info: Info
  professional: Professional
  social: Social
  aboutMe: AboutMe
  knowledge: Knowledge
  speaker: Speaker
  archivement: [Achievements]
}

type Info {
  name: String
  lastName: String
  image: String
  cover: String
  email: String
  gender: String
  website: String
  phone: String
}

type AboutMe {
  yourPassion: String
  existingProblem: String
  steps: String
}

type Knowledge {
  languages: [String]
  curiosity: [String]
  lookingFor: [String]
}

type Professional {
  languages: [Tags]
  salaryRange: SalaryRange
  jobType: [String]
}

type Speaker {
  join: Boolean
  topic: SalaryRange
  style: [ObjectType]
  stage: [ObjectType]
}

type Subscription {
  endpoint: String!
  keys: Keys!
}

type Keys {
  auth: String!
  p256dh: String!
}

input KeysInput {
  auth: String!
  p256dh: String!
}

input SubscriptionInput {
  endpoint: String!
  keys: KeysInput!
}

type Query {
  users(user: UserInput!): [User]
  user(_id: String): User
}

input UserInput {
  _id: String!
  createdAt: Date!
  services: [String]!
  emails: [Email]
  profile: Profile!
  subscriptions: [Subscription]
}

type Mutation {
  sendVerificationEmail: User
  saveSubscription(subscription: SubscriptionInput!): User
  deleteSubscription(endpoint: String!): User
  sendPushNotification: User
}